export PAGER=most
export EDITOR="/usr/bin/nvim"
export TERM=xterm-256color

# path
export PATH=$PATH:~/bin/i3
export PATH=$PATH:~/bin/tools
export PATH=$PATH:~/.cargo/bin              # Rust
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:~/go/bin

#----------------------
# DIR 
#----------------------
alias cdd="cd $HOME/dev"
alias cdb="cd $HOME/dev/build"

#----------------------
# OTHERS 
#----------------------
alias howToKraken="cat $HOME/dev/dotfiles/notes/navitia.md"
alias cat='cat'
alias g='git'
alias v='nvim.appimage'
alias vi='nvim.appimage'
alias vim='nvim.appimage'
alias cl="clear"
alias cll="clear && tmux clear-history"
alias showConnexion='cat $HOME/.kwatch'
alias sk="~/bin/switch_keyboard"
alias wf="nmtui"
alias gnome-cc="XDG_CURRENT_DESKTOP=GNOME gnome-control-center"

#----------------------
# Rabbit-mq
#----------------------
alias rabbitmq_up='cd $HOME/dev/dotfiles/roles/docker/files/rabbit-mq && docker-compose up &>/dev/null &'
alias rabbitmq_down='cd $HOME/dev/dotfiles/roles/docker/files/rabbit-mq && docker-compose down -v &>/dev/null &'

replace(){
    find $1 -type f -exec sed -i "s/$2/$3/g" {} \;
}

hard_nmap(){
    sudo nmap -A -T4 -Pn -p- $1
}
soft_nmap(){
    sudo nmap -sS -sU $1
}

# archive extractor
ar_extractor ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# include navitia_profile
if [ -f $HOME/.navitia_profile ]; then
    . $HOME/.navitia_profile
fi

# detect ssh connection
SESSION_TYPE='local'
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  SESSION_TYPE='remote/ssh'
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) SESSION_TYPE='remote/ssh';;
  esac
fi
if [ "$SESSION_TYPE" = "remote/ssh" ]
then
  session_message="$(date -u) : ssh session detected - user : $USER  ssh tty : $SSH_TTY - ssh client : $SSH_CLIENT"
  echo $session_message >> .ssh_session_detected
  notify-send 'SECURITY ALERT' $session_message
fi
